/*******************************************************************************
	Generated by: DLL to C version 3.74
	Date: 2023-12-11
	Description: The implementation code for scci.dll.
	Website: http://www.dll-decompiler.com
	Technical Support: support@dll-decompiler.com
*******************************************************************************/

#include "stdafx.h"
#include "Scci.h"


HMODULE g_hScci;
BOOL (WINAPI *Scci_DllEntryPoint)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);

extern UCHAR Scci_text[0x47000];
extern UCHAR Scci_rdata[0xE000];
extern UCHAR Scci_data[0x7000];
extern UCHAR Scci_scciseg[0x1000];
extern UCHAR Scci_rsrc[0x1C000];
extern UCHAR Scci_reloc[0xC000];

__declspec(align(16)) stScci Scci;

void* __stdcall Scci_RVA(DWORD rvaAddr)
{
	if(rvaAddr==0)
		return g_hScci;
	if(rvaAddr >= 0 && rvaAddr < 0x86000)
		return (UCHAR*)&Scci + rvaAddr;

	return NULL;
}

FARPROC __stdcall Scci_GetExport(LPCSTR lpExportName)
{
	if(lstrcmpA(lpExportName,"getSoundInterfaceManager")==0)
		return (FARPROC)Scci_VA(0x10015690);

	return NULL;
}

BOOL Scci_Init()
{
	HMODULE hDll;
	DWORD oldProtect;
	DWORD nCodeSize;
	void (*fInitData)(HMODULE,void*,void*);

	oldProtect = PAGE_EXECUTE_READWRITE;
	nCodeSize = Scci_text(Scci_CodeEnd) - Scci_text(Scci_CodeStart);
	VirtualProtect(Scci_text(Scci_CodeStart),nCodeSize,PAGE_EXECUTE_READWRITE,&oldProtect);

	memcpy(&Scci.Text,&Scci_text,sizeof(Scci_text));
	memcpy(&Scci.Rdata,&Scci_rdata,sizeof(Scci_rdata));
	memcpy(&Scci.Data,&Scci_data,sizeof(Scci_data));
	memcpy(&Scci.Scciseg,&Scci_scciseg,sizeof(Scci_scciseg));
	memcpy(&Scci.Rsrc,&Scci_rsrc,sizeof(Scci_rsrc));
	memcpy(&Scci.Reloc,&Scci_reloc,sizeof(Scci_reloc));

	hDll = ::LoadLibraryA("KERNEL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"KERNEL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x20] = (FARPROC)&CloseHandle;
	Scci_rdata[0x24] = (FARPROC)&OutputDebugStringA;
	Scci_rdata[0x28] = (FARPROC)&FreeLibrary;
	Scci_rdata[0x2C] = (FARPROC)&GetProcAddress;
	Scci_rdata[0x30] = (FARPROC)&LoadLibraryA;
	Scci_rdata[0x34] = (FARPROC)&GetPrivateProfileIntA;
	Scci_rdata[0x38] = (FARPROC)&GetPrivateProfileStringA;
	Scci_rdata[0x3C] = (FARPROC)&WritePrivateProfileStringA;
	Scci_rdata[0x40] = (FARPROC)&GetModuleFileNameA;
	Scci_rdata[0x44] = (FARPROC)&WaitForSingleObject;
	Scci_rdata[0x48] = (FARPROC)&SetEvent;
	Scci_rdata[0x4C] = (FARPROC)&CreateEventA;
	Scci_rdata[0x50] = (FARPROC)&SetThreadPriority;
	Scci_rdata[0x54] = (FARPROC)&GetExitCodeThread;
	Scci_rdata[0x58] = (FARPROC)&CreateThread;
	Scci_rdata[0x5C] = (FARPROC)&SetPriorityClass;
	Scci_rdata[0x60] = (FARPROC)&GetCurrentProcess;
	Scci_rdata[0x64] = (FARPROC)&lstrcmpA;
	Scci_rdata[0x68] = (FARPROC)&ClearCommError;
	Scci_rdata[0x6C] = (FARPROC)&GetCommState;
	Scci_rdata[0x70] = (FARPROC)&SetCommState;
	Scci_rdata[0x74] = (FARPROC)&SetCommTimeouts;
	Scci_rdata[0x78] = (FARPROC)&DeviceIoControl;
	Scci_rdata[0x7C] = (FARPROC)&GetCommTimeouts;
	Scci_rdata[0x80] = (FARPROC)&QueryDosDeviceA;
	Scci_rdata[0x84] = (FARPROC)&ExitThread;
	Scci_rdata[0x88] = (FARPROC)&CreateFileW;
	Scci_rdata[0x8C] = (FARPROC)&WriteConsoleW;
	Scci_rdata[0x90] = (FARPROC)&SetStdHandle;
	Scci_rdata[0x94] = (FARPROC)&LoadLibraryW;
	Scci_rdata[0x98] = (FARPROC)&OutputDebugStringW;
	Scci_rdata[0x9C] = (FARPROC)&LoadLibraryExW;
	Scci_rdata[0xA0] = (FARPROC)&FreeEnvironmentStringsW;
	Scci_rdata[0xA4] = (FARPROC)&GetEnvironmentStringsW;
	Scci_rdata[0xA8] = (FARPROC)&GetSystemTimeAsFileTime;
	Scci_rdata[0xAC] = (FARPROC)&GetCurrentProcessId;
	Scci_rdata[0xB0] = (FARPROC)&QueryPerformanceCounter;
	Scci_rdata[0xB4] = (FARPROC)&GetFileType;
	Scci_rdata[0xB8] = (FARPROC)&SetFilePointerEx;
	Scci_rdata[0xBC] = (FARPROC)&GetConsoleMode;
	Scci_rdata[0xC0] = (FARPROC)&GetModuleHandleA;
	Scci_rdata[0xC4] = (FARPROC)&FlushFileBuffers;
	Scci_rdata[0xC8] = (FARPROC)&GetOEMCP;
	Scci_rdata[0xCC] = (FARPROC)&GetACP;
	Scci_rdata[0xD0] = (FARPROC)&IsValidCodePage;
	Scci_rdata[0xD4] = (FARPROC)&GetProcessHeap;
	Scci_rdata[0xD8] = (FARPROC)&GetModuleFileNameW;
	Scci_rdata[0xDC] = (FARPROC)&GetStdHandle;
	Scci_rdata[0xE0] = (FARPROC)&HeapSize;
	Scci_rdata[0xE4] = (FARPROC)&GetModuleHandleExW;
	Scci_rdata[0xE8] = (FARPROC)&ExitProcess;
	Scci_rdata[0xEC] = (FARPROC)&EnumSystemLocalesW;
	Scci_rdata[0xF0] = (FARPROC)&GetUserDefaultLCID;
	Scci_rdata[0xF4] = (FARPROC)&IsValidLocale;
	Scci_rdata[0xF8] = (FARPROC)&GetLocaleInfoW;
	Scci_rdata[0xFC] = (FARPROC)&LCMapStringW;
	Scci_rdata[0x100] = (FARPROC)&CompareStringW;
	Scci_rdata[0x104] = (FARPROC)&GetModuleHandleW;
	Scci_rdata[0x108] = (FARPROC)&GetStartupInfoW;
	Scci_rdata[0x10C] = (FARPROC)&TlsFree;
	Scci_rdata[0x110] = (FARPROC)&TlsSetValue;
	Scci_rdata[0x114] = (FARPROC)&TlsGetValue;
	Scci_rdata[0x118] = (FARPROC)&TlsAlloc;
	Scci_rdata[0x11C] = (FARPROC)&TerminateProcess;
	Scci_rdata[0x120] = (FARPROC)&SetLastError;
	Scci_rdata[0x124] = (FARPROC)&SetUnhandledExceptionFilter;
	Scci_rdata[0x128] = (FARPROC)&UnhandledExceptionFilter;
	Scci_rdata[0x12C] = (FARPROC)&GetCPInfo;
	Scci_rdata[0x130] = (FARPROC)&InitializeCriticalSectionAndSpinCount;
	*(FARPROC*)&Scci.Rdata[0x134] = ::GetProcAddress(hDll,"RtlUnwind");
	if(!Scci_rdata[0x134])
		return FALSE;
	Scci_rdata[0x138] = (FARPROC)&RaiseException;
	Scci_rdata[0x13C] = (FARPROC)&GetCurrentThreadId;
	Scci_rdata[0x140] = (FARPROC)&HeapReAlloc;
	Scci_rdata[0x144] = (FARPROC)&IsProcessorFeaturePresent;
	Scci_rdata[0x148] = (FARPROC)&IsDebuggerPresent;
	Scci_rdata[0x14C] = (FARPROC)&HeapAlloc;
	Scci_rdata[0x150] = (FARPROC)&HeapFree;
	Scci_rdata[0x154] = (FARPROC)&ReadFile;
	Scci_rdata[0x158] = (FARPROC)&GetCommandLineA;
	Scci_rdata[0x15C] = (FARPROC)&WriteFile;
	Scci_rdata[0x160] = (FARPROC)&CreateFileA;
	Scci_rdata[0x164] = (FARPROC)&DeleteCriticalSection;
	Scci_rdata[0x168] = (FARPROC)&InitializeCriticalSection;
	Scci_rdata[0x16C] = (FARPROC)&lstrlenA;
	Scci_rdata[0x170] = (FARPROC)&Sleep;
	Scci_rdata[0x174] = (FARPROC)&FindResourceA;
	Scci_rdata[0x178] = (FARPROC)&EnterCriticalSection;
	Scci_rdata[0x17C] = (FARPROC)&LeaveCriticalSection;
	Scci_rdata[0x180] = (FARPROC)&LockResource;
	Scci_rdata[0x184] = (FARPROC)&LoadResource;
	Scci_rdata[0x188] = (FARPROC)&GetLastError;
	Scci_rdata[0x18C] = (FARPROC)&GetStringTypeW;
	Scci_rdata[0x190] = (FARPROC)&MultiByteToWideChar;
	Scci_rdata[0x194] = (FARPROC)&WideCharToMultiByte;
	Scci_rdata[0x198] = (FARPROC)&lstrcpyA;
	Scci_rdata[0x19C] = (FARPROC)&GetConsoleCP;
	Scci_rdata[0x1A0] = (FARPROC)&DecodePointer;
	Scci_rdata[0x1A4] = (FARPROC)&EncodePointer;
	Scci_rdata[0x1A8] = (FARPROC)&InterlockedDecrement;
	Scci_rdata[0x1AC] = (FARPROC)&InterlockedIncrement;

	hDll = ::LoadLibraryA("USER32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"USER32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x1D8] = (FARPROC)&BeginPaint;
	Scci_rdata[0x1DC] = (FARPROC)&GetCursorPos;
	Scci_rdata[0x1E0] = (FARPROC)&ShowWindow;
	Scci_rdata[0x1E4] = (FARPROC)&GetSystemMetrics;
	Scci_rdata[0x1E8] = (FARPROC)&IsWindowVisible;
	Scci_rdata[0x1EC] = (FARPROC)&UpdateWindow;
	Scci_rdata[0x1F0] = (FARPROC)&MoveWindow;
	Scci_rdata[0x1F4] = (FARPROC)&InvalidateRect;
	Scci_rdata[0x1F8] = (FARPROC)&KillTimer;
	Scci_rdata[0x1FC] = (FARPROC)&PostQuitMessage;
	Scci_rdata[0x200] = (FARPROC)&GetWindowRect;
	Scci_rdata[0x204] = (FARPROC)&ScreenToClient;
	Scci_rdata[0x208] = (FARPROC)&SetTimer;
	Scci_rdata[0x20C] = (FARPROC)&DestroyWindow;
	Scci_rdata[0x210] = (FARPROC)&EndPaint;
	Scci_rdata[0x214] = (FARPROC)&LoadIconA;
	Scci_rdata[0x218] = (FARPROC)&DefWindowProcA;
	Scci_rdata[0x21C] = (FARPROC)&MessageBoxA;
	Scci_rdata[0x220] = (FARPROC)&SetWindowTextA;
	Scci_rdata[0x224] = (FARPROC)&wsprintfA;
	Scci_rdata[0x228] = (FARPROC)&wvsprintfA;
	Scci_rdata[0x22C] = (FARPROC)&GetDC;
	Scci_rdata[0x230] = (FARPROC)&ReleaseDC;
	Scci_rdata[0x234] = (FARPROC)&SendMessageA;
	Scci_rdata[0x238] = (FARPROC)&UnregisterClassA;
	Scci_rdata[0x23C] = (FARPROC)&PeekMessageA;
	Scci_rdata[0x240] = (FARPROC)&SetWindowPos;
	Scci_rdata[0x244] = (FARPROC)&GetMessageA;
	Scci_rdata[0x248] = (FARPROC)&TrackPopupMenu;
	Scci_rdata[0x24C] = (FARPROC)&GetSubMenu;
	Scci_rdata[0x250] = (FARPROC)&LoadMenuA;
	Scci_rdata[0x254] = (FARPROC)&IsDialogMessageA;
	Scci_rdata[0x258] = (FARPROC)&TranslateMessage;
	Scci_rdata[0x25C] = (FARPROC)&EnableMenuItem;
	Scci_rdata[0x260] = (FARPROC)&PostMessageA;
	Scci_rdata[0x264] = (FARPROC)&DispatchMessageA;
	Scci_rdata[0x268] = (FARPROC)&DestroyMenu;
	Scci_rdata[0x26C] = (FARPROC)&LoadCursorA;
	Scci_rdata[0x270] = (FARPROC)&CheckMenuItem;
	Scci_rdata[0x274] = (FARPROC)&RegisterClassA;
	Scci_rdata[0x278] = (FARPROC)&GetDlgItem;
	Scci_rdata[0x27C] = (FARPROC)&EnableWindow;
	Scci_rdata[0x280] = (FARPROC)&GetDlgItemInt;
	Scci_rdata[0x284] = (FARPROC)&SetDlgItemInt;
	Scci_rdata[0x288] = (FARPROC)&DialogBoxParamA;
	Scci_rdata[0x28C] = (FARPROC)&GetDlgItemTextA;
	Scci_rdata[0x290] = (FARPROC)&SetDlgItemTextA;
	Scci_rdata[0x294] = (FARPROC)&SendDlgItemMessageA;
	Scci_rdata[0x298] = (FARPROC)&EndDialog;
	Scci_rdata[0x29C] = (FARPROC)&SetForegroundWindow;
	Scci_rdata[0x2A0] = (FARPROC)&SetWindowLongA;
	Scci_rdata[0x2A4] = (FARPROC)&GetWindowLongA;
	Scci_rdata[0x2A8] = (FARPROC)&CreateWindowExA;

	hDll = ::LoadLibraryA("GDI32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"GDI32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x8] = (FARPROC)&BitBlt;
	Scci_rdata[0xC] = (FARPROC)&CreateDIBSection;
	Scci_rdata[0x10] = (FARPROC)&DeleteObject;
	Scci_rdata[0x14] = (FARPROC)&SelectObject;
	Scci_rdata[0x18] = (FARPROC)&CreateCompatibleDC;

	hDll = ::LoadLibraryA("SHELL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"SHELL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x1C8] = (FARPROC)&Shell_NotifyIconA;

	hDll = ::LoadLibraryA("COMCTL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"COMCTL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)&Scci.Rdata[0x0] = ::GetProcAddress(hDll,(LPCSTR)0x11);
	if(!Scci_rdata[0x0])
		return FALSE;

	hDll = ::LoadLibraryA("WINMM.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"WINMM.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x2B0] = (FARPROC)&timeGetTime;
	Scci_rdata[0x2B4] = (FARPROC)&timeSetEvent;
	Scci_rdata[0x2B8] = (FARPROC)&timeKillEvent;
	Scci_rdata[0x2BC] = (FARPROC)&timeBeginPeriod;
	Scci_rdata[0x2C0] = (FARPROC)&midiOutPrepareHeader;
	Scci_rdata[0x2C4] = (FARPROC)&midiOutOpen;
	Scci_rdata[0x2C8] = (FARPROC)&midiOutClose;
	Scci_rdata[0x2CC] = (FARPROC)&midiOutLongMsg;
	Scci_rdata[0x2D0] = (FARPROC)&waveOutPrepareHeader;
	Scci_rdata[0x2D4] = (FARPROC)&waveOutOpen;
	Scci_rdata[0x2D8] = (FARPROC)&waveOutUnprepareHeader;
	Scci_rdata[0x2DC] = (FARPROC)&waveOutReset;
	Scci_rdata[0x2E0] = (FARPROC)&waveOutWrite;
	Scci_rdata[0x2E4] = (FARPROC)&midiOutGetNumDevs;
	Scci_rdata[0x2E8] = (FARPROC)&midiOutGetDevCapsA;
	Scci_rdata[0x2EC] = (FARPROC)&waveOutClose;
	Scci_rdata[0x2F0] = (FARPROC)&midiOutUnprepareHeader;

	hDll = ::LoadLibraryA("SETUPAPI.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"SETUPAPI.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x1B4] = (FARPROC)&SetupDiDestroyDeviceInfoList;
	Scci_rdata[0x1B8] = (FARPROC)&SetupDiGetDeviceInterfaceDetailA;
	Scci_rdata[0x1BC] = (FARPROC)&SetupDiEnumDeviceInterfaces;
	Scci_rdata[0x1C0] = (FARPROC)&SetupDiGetClassDevsA;

	hDll = ::LoadLibraryA("WINUSB.DLL");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"WINUSB.DLL\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x2F8] = (FARPROC)&WinUsb_QueryInterfaceSettings;
	Scci_rdata[0x2FC] = (FARPROC)&WinUsb_Initialize;
	Scci_rdata[0x300] = (FARPROC)&WinUsb_SetPipePolicy;
	Scci_rdata[0x304] = (FARPROC)&WinUsb_ControlTransfer;
	Scci_rdata[0x308] = (FARPROC)&WinUsb_FlushPipe;
	Scci_rdata[0x30C] = (FARPROC)&WinUsb_WritePipe;
	Scci_rdata[0x310] = (FARPROC)&WinUsb_Free;
	Scci_rdata[0x314] = (FARPROC)&WinUsb_QueryPipe;

	hDll = ::LoadLibraryA("SHLWAPI.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"SHLWAPI.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	Scci_rdata[0x1D0] = (FARPROC)&PathFileExistsA;

	VirtualProtect(&Scci_InitData, sizeof(Scci_InitData), PAGE_EXECUTE_READWRITE, &oldProtect);

	*(FARPROC*)&fInitData = (FARPROC)&Scci_InitData[0];
	fInitData(g_hScci,Scci_RVA,Scci_GetExport);

	*(FARPROC*)&Scci_DllEntryPoint = (FARPROC)Scci_VA(0x10035818);
	return TRUE;
}

extern "C" __declspec(naked) void getSoundInterfaceManager(){__asm push offset Scci + 0x15690 __asm ret}

/* Replace the default DllMain in dllmain.cpp */
BOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
	if(ul_reason_for_call==DLL_PROCESS_ATTACH)
	{
		g_hScci = hModule;
		Scci_Init();
	}

	return Scci_DllEntryPoint(hModule,ul_reason_for_call,lpReserved);
}

